import { NormalizedModuleMetadata } from '../models/normalized-module-metadata';
import { ControllerAndMethodMetadata } from './controller-and-method-metadata';
import { HttpMethod, ImportedProviders, ModuleType, ModuleWithParams, NormalizedGuard, ServiceProvider } from './mix';

export class ImportObj {
  module: ModuleType | ModuleWithParams;
  providers: ServiceProvider[] = [];
}

export class ImportsMap {
  importedPerMod = new Map<any, ImportObj>();
  importedPerRou = new Map<any, ImportObj>();
  importedPerReq = new Map<any, ImportObj>();
}

/**
 * Metadata collected using `ModuleFactory`.
 */
export class MetadataPerMod1 {
  prefixPerMod: string;
  guardsPerMod: NormalizedGuard[];
  /**
   * Snapshot of NormalizedModuleMetadata. If you modify any array in this object,
   * the original array will remain unchanged.
   */
  meta: NormalizedModuleMetadata;
  /**
   * The controller metadata collected from all controllers of current module.
   */
  controllersMetadata: ControllerAndMethodMetadata[];
  /**
   * Map between a module and its ImportedProviders.
   */
  importedProvidersMap: Map<ModuleType | ModuleWithParams, ImportedProviders>;
  importedTokensMap: { perMod: Map<any, ImportObj>; perRou: Map<any, ImportObj>; perReq: Map<any, ImportObj> };
}

/**
 * This metadata is generated by `ROUTES_EXTENSIONS` group, and available for other extensions
 * that need set routes.
 */
export class MetadataPerMod2 {
  module: ModuleType | ModuleWithParams;
  moduleName: string;
  /**
   * Providers per a module.
   */
  providersPerMod: ServiceProvider[];
  /**
   * Providers per a route.
   */
  providersPerRou: ServiceProvider[];
  /**
   * Providers per a request.
   */
  providersPerReq: ServiceProvider[];
  metaForExtensionsPerRouArr: MetaForExtensionsPerRou[];
}

export class MetaForExtensionsPerRou {
  /**
   * Providers per a route.
   */
  providersPerRou: ServiceProvider[];
  /**
   * Providers per a request.
   */
  providersPerReq: ServiceProvider[];
  path: string;
  httpMethod: HttpMethod;
}
